#!/usr/bin/env python3
# Copyright 2023 Marcus MÃ¼ller
# SPDX-License-Identifier: GPL-3.0-or-later

from textual.app import App, ComposeResult
from textual.reactive import reactive
from textual.binding import Binding
from textual.widgets import Footer, Header, MarkdownViewer, TabbedContent, TabPane

args = None


class Markmedown(App):
    BINDINGS = [Binding(key="q", action="quit", description="Quit"),
                ]
    show_toc = reactive(False)

    def compose(self) -> ComposeResult:
        self.show_toc = args.table_of_contents
        self.files = args.files
        self.idx = 0
        self.md = [file.read() for file in self.files]
        self.mdvs = []
        with TabbedContent():
            for idx, file in enumerate(self.files):
                with TabPane(f"{idx} {file.name}", id=f"f_{idx}"):
                    file.seek(0)
                    mdv = MarkdownViewer(markdown=file.read(), show_table_of_contents=self.show_toc)
                    self.mdvs += [mdv]
                    yield mdv
        self.update()
        yield Header()
        yield Footer()

    def update(self) -> None:
        self.title = f"{self.idx} {self.files[self.idx].name}"


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser("Markmedown")
    parser.add_argument(
        "-t", "--table-of-contents", action="store_true", help="Show table of contents"
    )
    parser.add_argument("files", type=argparse.FileType("r", encoding="utf-8"), help="files to display", nargs="+")
    args = parser.parse_args()
    app = Markmedown()
    app.run()
